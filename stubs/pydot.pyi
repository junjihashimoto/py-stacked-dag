# Stubs for pydot (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

__license__: str
PY3: Any
str_type = str
#str_type = basestring
GRAPH_ATTRIBUTES: Any
EDGE_ATTRIBUTES: Any
NODE_ATTRIBUTES: Any
CLUSTER_ATTRIBUTES: Any

class frozendict(dict):
    __delitem__: Any = ...
    __setitem__: Any = ...
    clear: Any = ...
    pop: Any = ...
    popitem: Any = ...
    setdefault: Any = ...
    update: Any = ...
    def __new__(cls, *args: Any, **kw: Any): ...
    def __init__(self, *args: Any, **kw: Any) -> None: ...
    def __hash__(self): ...

dot_keywords: Any
id_re_alpha_nums: Any
id_re_alpha_nums_with_ports: Any
id_re_num: Any
id_re_with_port: Any
id_re_dbl_quoted: Any
id_re_html: Any

def needs_quotes(s: Any): ...
def quote_if_necessary(s: Any): ...
def graph_from_dot_data(s: Any): ...
def graph_from_dot_file(path: Any, encoding: Optional[Any] = ...): ...
def graph_from_edges(edge_list: Any, node_prefix: str = ..., directed: bool = ...): ...
def graph_from_adjacency_matrix(matrix: Any, node_prefix: str = ..., directed: bool = ...): ...
def graph_from_incidence_matrix(matrix: Any, node_prefix: str = ..., directed: bool = ...): ...

class Common:
    def __get_attribute__(self, attr: Any): ...
    def set_parent_graph(self, parent_graph: Any) -> None: ...
    def get_parent_graph(self): ...
    def set(self, name: Any, value: Any) -> None: ...
    def get(self, name: Any): ...
    def get_attributes(self): ...
    def set_sequence(self, seq: Any) -> None: ...
    def get_sequence(self): ...
    def create_attribute_methods(self, obj_attributes: Any): ...

class Error(Exception):
    value: Any = ...
    def __init__(self, value: Any) -> None: ...

class InvocationException(Exception):
    value: Any = ...
    def __init__(self, value: Any) -> None: ...

class Node(Common):
    obj_dict: Any = ...
    def __init__(self, name: str = ..., obj_dict: Optional[Any] = ..., **attrs: Any) -> None: ...
    def set_name(self, node_name: Any) -> None: ...
    def get_name(self): ...
    def get_port(self): ...
    def add_style(self, style: Any) -> None: ...
    def to_string(self): ...

class Edge(Common):
    obj_dict: Any = ...
    def __init__(self, src: str = ..., dst: str = ..., obj_dict: Optional[Any] = ..., **attrs: Any) -> None: ...
    def get_source(self): ...
    def get_destination(self): ...
    def __hash__(self): ...
    def __eq__(self, edge: Any): ...
    def parse_node_ref(self, node_str: Any): ...
    def to_string(self): ...

class Graph(Common):
    obj_dict: Any = ...
    def __init__(self, graph_name: str = ..., obj_dict: Optional[Any] = ..., graph_type: str = ..., strict: bool = ..., suppress_disconnected: bool = ..., simplify: bool = ..., **attrs: Any) -> None: ...
    def get_graph_type(self): ...
    def get_top_graph_type(self): ...
    def set_graph_defaults(self, **attrs: Any) -> None: ...
    def get_graph_defaults(self, **attrs: Any): ...
    def set_node_defaults(self, **attrs: Any) -> None: ...
    def get_node_defaults(self, **attrs: Any): ...
    def set_edge_defaults(self, **attrs: Any) -> None: ...
    def get_edge_defaults(self, **attrs: Any): ...
    def set_simplify(self, simplify: Any) -> None: ...
    def get_simplify(self): ...
    def set_type(self, graph_type: Any) -> None: ...
    def get_type(self): ...
    def set_name(self, graph_name: Any) -> None: ...
    def get_name(self): ...
    def set_strict(self, val: Any) -> None: ...
    def get_strict(self, val: Any): ...
    def set_suppress_disconnected(self, val: Any) -> None: ...
    def get_suppress_disconnected(self, val: Any): ...
    def get_next_sequence_number(self): ...
    def add_node(self, graph_node: Any) -> None: ...
    def del_node(self, name: Any, index: Optional[Any] = ...): ...
    def get_node(self, name: Any): ...
    def get_nodes(self): ...
    def get_node_list(self): ...
    def add_edge(self, graph_edge: Any) -> None: ...
    def del_edge(self, src_or_list: Any, dst: Optional[Any] = ..., index: Optional[Any] = ...): ...
    def get_edge(self, src_or_list: Any, dst: Optional[Any] = ...): ...
    def get_edges(self): ...
    def get_edge_list(self): ...
    def add_subgraph(self, sgraph: Any) -> None: ...
    def get_subgraph(self, name: Any): ...
    def get_subgraphs(self): ...
    def get_subgraph_list(self): ...
    def set_parent_graph(self, parent_graph: Any) -> None: ...
    def to_string(self): ...

class Subgraph(Graph):
    def __init__(self, graph_name: str = ..., obj_dict: Optional[Any] = ..., suppress_disconnected: bool = ..., simplify: bool = ..., **attrs: Any) -> None: ...

class Cluster(Graph):
    def __init__(self, graph_name: str = ..., obj_dict: Optional[Any] = ..., suppress_disconnected: bool = ..., simplify: bool = ..., **attrs: Any) -> None: ...

class Dot(Graph):
    shape_files: Any = ...
    formats: Any = ...
    prog: str = ...
    def __init__(self, *argsl: Any, **argsd: Any) -> None: ...
    def set_shape_files(self, file_paths: Any) -> None: ...
    def set_prog(self, prog: Any) -> None: ...
    def write(self, path: Any, prog: Optional[Any] = ..., format: str = ..., encoding: Optional[Any] = ...): ...
    def create(self, prog: Optional[Any] = ..., format: str = ..., encoding: Optional[Any] = ...): ...
